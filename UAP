#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <queue>
#include <cstdlib>
using namespace std;

void clearScreen() {
    system("cls");
}

struct Buku {
    string judul;
    string kategori;
    int harga;
    float rating;
};

void merge(vector<Buku>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    vector<Buku> L(n1), R(n2);
    for (int i = 0; i < n1; i++) L[i] = arr[l + i];
    for (int j = 0; j < n2; j++) R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i].rating > R[j].rating)
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }

    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(vector<Buku>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

float knapsack(vector<Buku>& buku, int budget, vector<Buku>& bukuTerpilih, int& totalHarga) {
    int n = buku.size();
    vector<vector<float>> tabelRating(n + 1, vector<float>(budget + 1, 0));

    for (int i = 1; i <= n; ++i) {
        for (int w = 0; w <= budget; ++w) {
            if (buku[i - 1].harga <= w) {
                tabelRating[i][w] = max(
                    tabelRating[i - 1][w],
                    tabelRating[i - 1][w - buku[i - 1].harga] + buku[i - 1].rating
                );
            } else {
                tabelRating[i][w] = tabelRating[i - 1][w];
            }
        }
    }

    // Lacak buku yang terpilih menggunakan stack
    stack<Buku> track;
    int w = budget;
    for (int i = n; i > 0 && w > 0; --i) {
if (tabelRating[i][w] != tabelRating[i - 1][w]) {
            track.push(buku[i - 1]);
            w -= buku[i - 1].harga;
        }
    }

    totalHarga = 0;
    while (!track.empty()) {
        Buku b = track.top();
        bukuTerpilih.push_back(b);
        totalHarga += b.harga;
        track.pop();
    }

    return tabelRating[n][budget];
}

// Fungsi cetak hasil akhir
void tampilkanHasil(vector<Buku>& hasil, float totalRating, int totalHarga) {
    cout << endl;
    cout << "  Buku yang direkomendasikan:" <<endl;
    for (int i = 0; i < hasil.size(); ++i) {
    Buku& b = hasil[i];
    cout << "  Judul: " << b.judul << ", Harga: " << b.harga << ", Rating: " << b.rating << endl;
}
    cout << "  Total harga terpilih: " << totalHarga << endl;
    cout << "  Total rating optimal: " << totalRating << endl;
}

void tampilkanBuku(const vector<Buku>& daftar) {
    cout << "  Total buku tersedia: " << daftar.size() << " buku" << endl;
    for (int i = 0; i < daftar.size(); ++i) {
        const Buku& b = daftar[i];
        cout << endl;
        cout << "    " << (i + 1) << ". ---------------------------" << endl;
        cout << "    Judul     : " << b.judul << endl;
        cout << "    Kategori  : " << b.kategori << endl;
        cout << "    Harga     : Rp" << b.harga << endl;
        cout << "    Rating    : " << b.rating << "/5.0" << endl;
        cout << "    ---------------------------" << endl;
    }
}

void hapusBuku(vector<Buku>& semuaBuku) {
    if (semuaBuku.empty()) {
        cout << "Tidak Ada Buku" << endl;
        return;
    }

    cout << "Daftar Buku yang Tersedia:" << endl;
    tampilkanBuku(semuaBuku);
    
    int pilihan;
    cout << endl;
    cout << "Masukkan nomor buku yang ingin dihapus (1-" << semuaBuku.size() << ") atau 0 untuk batal: ";
    
    if (!(cin >> pilihan)) {
        cout << "Input tidak valid! Masukkan angka" << endl;
        cin.clear();
        cin.ignore(10000, '\n');
        return;
    }
    
    if (pilihan == 0) {
        cout << "Tidak Jadi Menghapus Buku" << endl;
        return;
    }
    
    if (pilihan < 1 || pilihan > semuaBuku.size()) {
        cout << "Nomor tidak valid!" << endl;
        return;
    }
