#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <queue>
#include <cstdlib>
using namespace std;

void clearScreen() {
    system("cls");
}

struct Buku {
    string judul;
    string kategori;
    int harga;
    float rating;
};

void merge(vector<Buku>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    vector<Buku> L(n1), R(n2);
    for (int i = 0; i < n1; i++) L[i] = arr[l + i];
    for (int j = 0; j < n2; j++) R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i].rating > R[j].rating)
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }

    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(vector<Buku>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

float knapsack(vector<Buku>& buku, int budget, vector<Buku>& bukuTerpilih, int& totalHarga) {
    int n = buku.size();
    vector<vector<float>> tabelRating(n + 1, vector<float>(budget + 1, 0));

    for (int i = 1; i <= n; ++i) {
        for (int w = 0; w <= budget; ++w) {
            if (buku[i - 1].harga <= w) {
                tabelRating[i][w] = max(
                    tabelRating[i - 1][w],
                    tabelRating[i - 1][w - buku[i - 1].harga] + buku[i - 1].rating
                );
            } else {
                tabelRating[i][w] = tabelRating[i - 1][w];
            }
        }
    }
